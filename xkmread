#!/usr/bin/env python

import sys
import struct

def usage(exitcode = 0):
    import os
    print os.path.basename(__file__) + " file.xkm"
    sys.exit(exitcode)

class InvalidXKMFile:
    def __init__(self, reason):
        self.reason = reason

    def __str__(self):
        return self.reason

# How this works:
#   - Subclasses of XkmSection need to initialize self.field[] in the order of
#   the subfields of the section. Best during __init__
#   - Subclasses of XkmSection need to init self.format and self.struct_size
#   Once that's set up, the class can just call .unpack() on the file/buffer
#   and it will set itself up with member variables according to the field
#   names.
class XkmSection:
    def __init__(self):
        self.special_output = {}

    def unpack(self, buffer):
        t = struct.unpack(self.format, buffer.read(self.struct_size))
        for val, key in zip(t, self.fields):
            self.__dict__[key] = val

    def __str__(self):
        str = ""
        for key in self.fields:
            val = self.__dict__[key]
            if self.special_output.has_key(key):
                val = self.special_output[key][val]
            str += "%s: %s\n" % (key, val)
        return str

class XkmSectionInfo(XkmSection):
    def __init__(self):
        XkmSection.__init__(self)
        self.fields = [
                "type",
                "format",
                "size",
                "offset"
                ]
        self.format = "HHHH"
        self.struct_size = struct.calcsize(self.format)
        self.special_output["type"] = [
                       "XkmTypesIndex",
                       "XkmCompatMapIndex",
                       "XkmSymbolsIndex",
                       "XkmIndicatorsIndex",
                       "XkmKeyNamesIndex",
                       "XkmGeometryIndex",
                       "XkmVirtualModsIndex"]


def xkm_read_sectioninfo(file):
    sect = XkmSectionInfo()
    sect.unpack(file)
    print "%s" % sect

    return sect

def xkm_read_TOC(file):
    version, m, k, x = struct.unpack('Bccc', file.read(4))
    if x + k + m != "xkm":
        raise InvalidXKMFile("Not an XKM file.")

    print "XKM file version %d." % version

    type, min_keycode, max_keycode, ntoc, present, pad = struct.unpack('BBBBHH', file.read(8))
    print "File info:"
    print "    Type: %d" % type
    print "    Keycode range: %d-%d" % (min_keycode, max_keycode)
    print "    Number of sections: %d" % ntoc
    print "    Present: %d" % present

    for i in range(0, ntoc):
        print "Section %d" % i
        xkm_read_sectioninfo(file)


def xkm_read(file):
    xkm_read_TOC(file)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage(1)

    filename = sys.argv[1]
    file = open(filename, "rb")
    if not file:
        print "Cannot access %s" % filename
        sys.exit(1)

    try:
        xkm_read(file)
    except InvalidXKMFile as e:
        print "Failed to read file '%s'." % filename
        print "Reason: %s" % e

